--1.
select * from albums;
select * from artists;

select ifnull(aa.title, "No album") as "Album Name", a.name as "Artist Name" from artists a
left join albums aa on a.artistid=aa.artistid
order by a.name;

--2.
select a.name as "Artist Name", aa.title as "Album Name" from artists a
join albums aa on a.artistid=aa.artistid
order by name desc;


--3.
select a.name as "Artist Name" from artists a
left join albums aa on a.artistid=aa.artistid
where aa.title is null;

--4.
select a.name as "Artist Name", count(aa.albumid) as "No of albums" from artists a
left join albums aa on a.artistid=aa.artistid
group by "Artist Name"
order by "No of albums" desc, "Artist Name";

--5.
select a.name as "Artist Name", count(aa.albumid) as "No of albums" from artists a
left join albums aa on a.artistid=aa.artistid
group by "Artist Name"
having "No of albums" >= 10
order by "No of albums" desc, "Artist Name";

--6.
select a.name as "Artist Name", count(aa.albumid) as "No of albums" from artists a
left join albums aa on a.artistid=aa.artistid
group by "Artist Name"
order by "No of albums" desc limit 3;

--7.
select a.title as "Album Title", t.name as "Track", aa.name as "Artist Name" from albums a
join tracks t on t.albumid=a.albumid
join artists aa on a.artistid=aa.artistid
where aa.name="Santana"
order by t.trackid;


--8.
select * from employees;

select e.employeeID as "Employee ID", e.firstname || " " ||e.lastname as "Employee Name", e.title as "Employee Title", ee.employeeid as "Manager ID",  
ee.lastname || " " ||ee.firstname as "Manager Name", ee.title as "Manager Title" from employees e
join employees ee on ee.employeeid=e.reportsto
order by "Employee ID";

--9.
select e.employeeid as emp_id, e.firstname || " " ||e.lastname as emp_name, count(c.supportrepid) as cust_count from employees e
join customers c on c.supportrepid=e.employeeid
group by emp_id;

create view if not exists top_employees as select e.employeeid as emp_id, e.firstname || " " ||e.lastname as emp_name, count(c.supportrepid) as cust_count from employees e
join customers c on c.supportrepid=e.employeeid
group by emp_id;

select emp_name as "Employee Name", c.firstname || " " || c.lastname as "Customer Name" from top_employees
join customers c on top_employees.emp_id=c.supportrepid
where cust_count=(select max(cust_count) from top_employees)
order by emp_name;


--10.

insert into media_types(Name) values ("MP3");
select * from media_types;

create trigger if not exists prev_insertion before insert on tracks 
begin
    select
        case
            when NEW.mediatypeid=(select mediatypeid from media_types where name="MP3") then
            raise(ABORT, "You can't insert this media type.")
        end;
end;

insert into tracks(mediatypeid) values (6);
select * from tracks
order by mediatypeid desc;

--11.
--i tried to create a trigger which operates on all dml events at the same time, but i could not fix it in SQLite, im open for any suggestions:)

drop table tracks_audit_log;
create table tracks_audit_log(
    operation Text,
    datetime Text,
    username Text,
    old_value Text,
    new_value Text
);

create trigger tracks_audit after insert on tracks 
begin
    insert into tracks_audit_log(operation, datetime, username, new_value) values ("insert", datetime(), "user", new.trackid);
end;

create trigger tracks_audit after update on tracks 
begin
    insert into tracks_audit_log(operation, datetime, username, old_value, new_value) values ("update", datetime(), "user", old.trackid, new.trackid);
end;

create trigger tracks_audit after delete on tracks 
begin
    insert into tracks_audit_log(operation, datetime, username, old_value) values ("delete", datetime(), "user", old.trackid);
end;

